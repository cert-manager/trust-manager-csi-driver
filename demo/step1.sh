#!/bin/bash

# Copyright 2024 The cert-manager Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

set -eu

GREEN='\033[1;32m'
NC='\033[0m' # No Color
function info { printf "${GREEN}[INFO] $@${NC}\n"; }

info "setting up private ca"

cat <<EOF | kubectl apply -f - -o yaml | pygmentize -l yaml | sed 's/^/~>  /'
# PRIVATE CA
---
apiVersion: v1
kind: Namespace
metadata:
  name: example
---
apiVersion: cert-manager.io/v1
kind: Issuer
metadata:
  name: selfsigned-issuer
  namespace: example
spec:
  selfSigned: {}
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: ca
  namespace: example
spec:
  isCA: true
  commonName: test-ca
  subject:
    organizations:
      - ACME Inc.
    organizationalUnits:
      - Widgets
  secretName: ca-secret
  privateKey:
    algorithm: ECDSA
    size: 256
  issuerRef:
    name: selfsigned-issuer
    kind: Issuer
    group: cert-manager.io
---
apiVersion: cert-manager.io/v1
kind: Issuer
metadata:
  name: ca
  namespace: example
spec:
  ca:
    secretName: ca-secret
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: test-server
  namespace: example
spec:
  secretName: server-tls
  dnsNames:
  - "nginx.test.svc.cluster.local"
  - "nginx"
  issuerRef:
    name: ca
EOF

info "waiting cert be ready"

kubectl wait --namespace example --for=condition=Ready certificate/test-server

info "installing nginx"

cat <<EOF | helm upgrade --install --namespace example nginx oci://registry-1.docker.io/bitnamicharts/nginx -f -
tls:
  enabled: true
  autoGenerated: false
  existingSecret: server-tls

serverBlock: |
  server {
    listen 8443 ssl;
    ssl_certificate /certs/tls.crt;
    ssl_certificate_key /certs/tls.key;
  }
EOF

info "creating bundle"

cat <<EOF | kubectl apply -f - -o yaml | pygmentize -l yaml | sed 's/^/~>  /'
apiVersion: trust.cert-manager.io/v1alpha1
kind: Bundle
metadata:
  name: example.com
spec:
  sources:
  - useDefaultCAs: true
  target:
    configMap:
      key: "root-certs.pem"
EOF

info "creating example pod"

cat <<EOF | kubectl apply -f - -o yaml | pygmentize -l yaml | sed 's/^/~>  /'
apiVersion: v1
kind: Pod
metadata:
  name: example
  namespace: example
spec:
  containers:
    - name: example
      image: debian
      volumeMounts:
      - mountPath: "/etc/ssl/certs"
        name: etcsslcerts
      command: [ "tail", "-f", "/dev/null" ]
  volumes:
    - name: etcsslcerts
      csi:
        driver: csi.trust-manager.io
        readOnly: true
        volumeAttributes:
          trust.cert-manager.io/bundle: "example.com"
          trust.cert-manager.io/openssl-rehash: "/"
          trust.cert-manager.io/concatenated-files: "ca-certificates.crt"
EOF

info "waiting for pod to be ready"

kubectl wait --namespace example --for=condition=Ready pod/example

info "installing curl and strace"

kubectl exec --namespace example example -- sh -c 'apt update && apt install -y curl strace openssl ca-certificates-'

info "copying in dummy cert"

kubectl cp --namespace example demo/dummy.pem example:/dummy.pem